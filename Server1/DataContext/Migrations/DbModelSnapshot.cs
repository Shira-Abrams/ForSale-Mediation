// <auto-generated />
using System;
using DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataContext.Migrations
{
    [DbContext(typeof(Db))]
    partial class DbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Reposetory.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfSailingProperty")
                        .HasColumnType("int");

                    b.Property<double>("SumPriceForRenting")
                        .HasColumnType("float");

                    b.Property<double>("SumPriceForSaling")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Reposetory.Entity.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Aircondition")
                        .HasColumnType("bit");

                    b.Property<int>("AllFloor")
                        .HasColumnType("int");

                    b.Property<bool>("Bars")
                        .HasColumnType("bit");

                    b.Property<bool>("Basmsent")
                        .HasColumnType("bit");

                    b.Property<int>("BuildingYear")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("DisabledAcces")
                        .HasColumnType("bit");

                    b.Property<bool>("Elivator")
                        .HasColumnType("bit");

                    b.Property<int>("EntrcyDate")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Furniture")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrlList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCommercial")
                        .HasColumnType("bit");

                    b.Property<int>("NumBlock")
                        .HasColumnType("int");

                    b.Property<int>("NumEvenue")
                        .HasColumnType("int");

                    b.Property<int>("NumRoom")
                        .HasColumnType("int");

                    b.Property<string>("OfferingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PandorDoor")
                        .HasColumnType("bit");

                    b.Property<bool>("Parkinglot")
                        .HasColumnType("bit");

                    b.Property<bool>("PorchGarden")
                        .HasColumnType("bit");

                    b.Property<double>("PriceForSm")
                        .HasColumnType("float");

                    b.Property<int>("PropertyCondition")
                        .HasColumnType("int");

                    b.Property<string>("PropertyDesctiption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PropertyPrice")
                        .HasColumnType("float");

                    b.Property<int>("PropertyStatus")
                        .HasColumnType("int");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<bool>("SafeRoom")
                        .HasColumnType("bit");

                    b.Property<double>("Sm")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double?>("Xcordinate")
                        .HasColumnType("float");

                    b.Property<double?>("Ycordinate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Reposetory.Entity.SearchingPropetry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Aircondition")
                        .HasColumnType("bit");

                    b.Property<bool>("Bars")
                        .HasColumnType("bit");

                    b.Property<bool>("Basmsent")
                        .HasColumnType("bit");

                    b.Property<bool>("DisabledAcces")
                        .HasColumnType("bit");

                    b.Property<bool>("Elivator")
                        .HasColumnType("bit");

                    b.Property<int>("FloorBegin")
                        .HasColumnType("int");

                    b.Property<int>("FloorEnd")
                        .HasColumnType("int");

                    b.Property<int>("Furniture")
                        .HasColumnType("int");

                    b.Property<bool>("IsCommercial")
                        .HasColumnType("bit");

                    b.Property<bool>("PandorDoor")
                        .HasColumnType("bit");

                    b.Property<bool>("Parkinglot")
                        .HasColumnType("bit");

                    b.Property<bool>("PorchGarden")
                        .HasColumnType("bit");

                    b.Property<double>("PriceBegin")
                        .HasColumnType("float");

                    b.Property<double>("PriceEnd")
                        .HasColumnType("float");

                    b.Property<double>("PriceForSmBegin")
                        .HasColumnType("float");

                    b.Property<double>("PriceForSmEnd")
                        .HasColumnType("float");

                    b.Property<string>("PropertyCondtion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyStatus")
                        .HasColumnType("int");

                    b.Property<string>("PropertyTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<bool>("SafeRoom")
                        .HasColumnType("bit");

                    b.Property<double>("SmBegin")
                        .HasColumnType("float");

                    b.Property<double>("SmEnd")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Xcordinate")
                        .HasColumnType("float");

                    b.Property<double>("Ycordinate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchingPropetries");
                });

            modelBuilder.Entity("Reposetory.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Reposetory.Entity.Property", b =>
                {
                    b.HasOne("Reposetory.Entity.City", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reposetory.Entity.User", "User")
                        .WithMany("PropertyList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reposetory.Entity.SearchingPropetry", b =>
                {
                    b.HasOne("Reposetory.Entity.User", "User")
                        .WithMany("ListOfSearching")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reposetory.Entity.City", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Reposetory.Entity.User", b =>
                {
                    b.Navigation("ListOfSearching");

                    b.Navigation("PropertyList");
                });
#pragma warning restore 612, 618
        }
    }
}
